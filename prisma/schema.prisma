generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String    @id @default(uuid())
  name      Json?
  email     String    @unique
  phone     String?
  role      UserRole  @default(CLIENT)
  createdAt DateTime  @default(now())
  rentals   Rental[]
  bookings  Booking[]
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  rentals     Rental[]
}

model Rental {
  id          String    @id @default(uuid())
  title       String
  description String
  price       Float
  available   Boolean   @default(true)
  location    String?
  condition   String?
  images      String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  status      Status    @default(AVAILABLE)
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  user        User?     @relation(fields: [userId], references: [id])
  userId      String?
  bookings    Booking[]
}

model Booking {
  id        String   @id @default(uuid())
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  rental    Rental   @relation(fields: [rentalId], references: [id])
  rentalId  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  agreement Agreement?
}

model Agreement {
  id              String   @id @default(uuid())
  bookingId       String   @unique
  terms           String
  acceptedByUser  Boolean  @default(false)
  acceptedByOwner Boolean  @default(false)
  signedAt        DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  booking         Booking  @relation(fields: [bookingId], references: [id])
}

enum UserRole {
  CLIENT
  SELLER
  SUPERADMIN
  ADMIN
}

enum Status {
  AVAILABLE
  UNAVAILABLE
  RENTED
  BOOKED
}